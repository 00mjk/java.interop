R: Gendarme.Rules.BadPractice.OnlyUseDisposeForIDisposableTypesRule
# We need *a* "cleanup" method, and I can't think of a better name than "Dispose"
# (Close? Destroy?), and for these types I don't want them to have Dispose()
# *instance* methods to avoid accidental bugs.
# See: 25de1f38, 8f7d3390
T: Java.Interop.JniPeerMembers
T: Java.Interop.JniPeerMembers/JniInstanceMethods
T: Java.Interop.JniPeerMembers/JniStaticMethods
T: Java.Interop.JniPeerMembers/JniInstanceFields
T: Java.Interop.JniPeerMembers/JniStaticFields
T: Java.Interop.JniObjectReference


R: Gendarme.Rules.BadPractice.PreferSafeHandleRule
# No, we don't want/need a SafeHandle for JniRuntime.InvocationPointer!
T: Java.Interop.JniRuntime


R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
# We don't *want* to dispose the value!
M: System.Void Java.Interop.JniEnvironmentInfo::set_EnvironmentPointer(System.IntPtr)
M: Java.Interop.JniType Java.Interop.JniPeerMembers::get_JniPeerType()

# These look like gendarme bugs wrt C#2 `yield return` methods.
M: System.Collections.IEnumerator Java.Interop.JniRuntime/JniTypeManager/<CreateGetTypeSignaturesEnumerator>c__Iterator0::System.Collections.IEnumerable.GetEnumerator()
M: System.Collections.IEnumerator Java.Interop.JniRuntime/JniTypeManager/<CreateGetTypesEnumerator>c__Iterator1::System.Collections.IEnumerable.GetEnumerator()
M: System.Collections.IEnumerator Java.Interop.JniRuntime/JniTypeManager/<CreateGetTypesForSimpleReferenceEnumerator>c__Iterator2::System.Collections.IEnumerable.GetEnumerator()


R: Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule
# It's consistent; GetHashCode()'s use of QualifiedReference pulls in everything Equals() compares.
T: Java.Interop.JniTypeSignature


R: Gendarme.Rules.Design.AvoidRefAndOutParametersRule
# JniEnvironment.References mirros native API
M: System.Int32 Java.Interop.JniEnvironment/References::GetJavaVM(System.IntPtr&)

# Use of `int&` is to avoid making JniEnvironmentInfo public; see a314ad82
M: Java.Interop.JniObjectReference Java.Interop.JniRuntime/JniObjectReferenceManager::CreateLocalReference(Java.Interop.JniObjectReference,System.Int32&)
M: System.Void Java.Interop.JniRuntime/JniObjectReferenceManager::DeleteLocalReference(Java.Interop.JniObjectReference&,System.Int32&)
M: System.Void Java.Interop.JniRuntime/JniObjectReferenceManager::CreatedLocalReference(Java.Interop.JniObjectReference,System.Int32&)
M: System.IntPtr Java.Interop.JniRuntime/JniObjectReferenceManager::ReleaseLocalReference(Java.Interop.JniObjectReference&,System.Int32&)

# See 25de1f38 for rationale for `ref JniObjectReference`
M: System.String Java.Interop.JniEnvironment/Strings::ToString(Java.Interop.JniObjectReference&,Java.Interop.JniObjectReferenceOptions)
M: System.Exception Java.Interop.JniRuntime::GetExceptionForThrowable(Java.Interop.JniObjectReference&,Java.Interop.JniObjectReferenceOptions)
M: System.Void Java.Interop.JniRuntime/JniObjectReferenceManager::DeleteGlobalReference(Java.Interop.JniObjectReference&)
M: System.Void Java.Interop.JniRuntime/JniObjectReferenceManager::DeleteWeakGlobalReference(Java.Interop.JniObjectReference&)
M: System.Void Java.Interop.JniType::.ctor(Java.Interop.JniObjectReference&,Java.Interop.JniObjectReferenceOptions)
M: System.Void Java.Interop.JniObjectReference::Dispose(Java.Interop.JniObjectReference&)
M: System.Void Java.Interop.JniObjectReference::Dispose(Java.Interop.JniObjectReference&,Java.Interop.JniObjectReferenceOptions)

# These are thread-safe wrappers for getting-and-updating a `static` variable.
M: Java.Interop.JniType Java.Interop.JniType::GetCachedJniType(Java.Interop.JniType&,System.String)
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetCachedConstructor(Java.Interop.JniInstanceMethodInfo&,System.String)
M: Java.Interop.JniInstanceFieldInfo Java.Interop.JniType::GetCachedInstanceField(Java.Interop.JniInstanceFieldInfo&,System.String,System.String)
M: Java.Interop.JniStaticFieldInfo Java.Interop.JniType::GetCachedStaticField(Java.Interop.JniStaticFieldInfo&,System.String,System.String)
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetCachedInstanceMethod(Java.Interop.JniInstanceMethodInfo&,System.String,System.String)
M: Java.Interop.JniStaticMethodInfo Java.Interop.JniType::GetCachedStaticMethod(Java.Interop.JniStaticMethodInfo&,System.String,System.String)


R: Gendarme.Rules.Design.AvoidVisibleFieldsRule
# This type is passed to native code, and should use fields, not properties.
T: Java.Interop.JniNativeMethodRegistration


R: Gendarme.Rules.Design.AvoidVisibleNestedTypesRule
# Deliberate choice to "hide" these types from code completion for `Java.Interop.`.
# See: 045b8af7, 6a42bb89, f60906cf, e10f7cb0, etc.
T: Java.Interop.JniEnvironment/References
T: Java.Interop.JniEnvironment/Arrays
T: Java.Interop.JniEnvironment/Exceptions
T: Java.Interop.JniEnvironment/InstanceFields
T: Java.Interop.JniEnvironment/InstanceMethods
T: Java.Interop.JniEnvironment/IO
T: Java.Interop.JniEnvironment/Monitors
T: Java.Interop.JniEnvironment/Object
T: Java.Interop.JniEnvironment/StaticFields
T: Java.Interop.JniEnvironment/StaticMethods
T: Java.Interop.JniEnvironment/Strings
T: Java.Interop.JniEnvironment/Types
T: Java.Interop.JniPeerMembers/JniInstanceMethods
T: Java.Interop.JniPeerMembers/JniStaticMethods
T: Java.Interop.JniPeerMembers/JniInstanceFields
T: Java.Interop.JniPeerMembers/JniStaticFields
T: Java.Interop.JniRuntime/CreationOptions
T: Java.Interop.JniRuntime/JniObjectReferenceManager
T: Java.Interop.JniRuntime/JniTypeManager


R: Gendarme.Rules.Design.EnumsShouldUseInt32Rule
# It's a `uint` because I'm using bitwise operators and want to keep things sane.
T: Java.Interop.JniObjectReferenceFlags


R: Gendarme.Rules.Design.FlagsShouldNotDefineAZeroValueRule
# Here, the 0 value is "None", and thus I think is acceptable;
# https://msdn.microsoft.com/en-us/library/ms229058(v=vs.110).aspx
# > **AVOID** using flag enum values of zero unless the value represents "all flags are cleared" and is named appropriately, as prescribed by the next guideline
# "Invalid" implies "all flags are cleared" to *me*...
# > **DO** name the zero value of flag enums None. For a flag enum, the value must always mean "all flags are cleared."
T: Java.Interop.JniObjectReferenceOptions


R: Gendarme.Rules.Design.MarkAssemblyWithCLSCompliantRule
# CLSCompliantAttribute isn't in the PCL profile we're targeting, so we can't apply it.
A: Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=null


R: Gendarme.Rules.Design.MarkAssemblyWithComVisibleRule
# Ditto; ComVisibleAttribute isn't in our PCL profile.
A: Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=null


R: Gendarme.Rules.Design.PreferEventsOverMethodsRule
# This isn't "raising" an event; it's "raising" a pending exception within the JVM.
M: System.Void Java.Interop.JniRuntime::RaisePendingException(System.Exception)


R: Gendarme.Rules.Design.TypesWithDisposableFieldsShouldBeDisposableRule
# JniEnvironmentInfo.Runtime is IDisposable, but JniRuntime will dispose JniEnvironmentInfo.
T: Java.Interop.JniEnvironmentInfo
# As per elsewhere, we don't want JniPeerMembers to be easily disposed by users.
# We should check/ensure that it is disposed by JniRuntime when JniRuntime is Dispose()d...
T: Java.Interop.JniPeerMembers
T: Java.Interop.JniPeerMembers/JniInstanceMethods
# It wouldn't make any sense to Dispose() CreationOptions...
T: Java.Interop.JniRuntime/CreationOptions
# JniTypeManager.Runtime is the "enclosing" runtime; it shouldn't Dispose()
T: Java.Interop.JniRuntime/JniTypeManager


R: Gendarme.Rules.Design.TypesWithNativeFieldsShouldBeDisposableRule
T: Java.Interop.JniEnvironmentInfo
T: Java.Interop.JniFieldInfo
T: Java.Interop.JniMethodInfo
T: Java.Interop.JniRuntime/CreationOptions


R: Gendarme.Rules.Design.Generic.AvoidDeclaringCustomDelegatesRule
# These are delegate types passed via P/Invoke, and thus *can't* be Func/Action
T: Java.Interop.DestroyJavaVMDelegate
T: Java.Interop.DetachCurrentThreadDelegate


R: Gendarme.Rules.Exceptions.UseObjectDisposedExceptionRule
# I don't want ~any overhead around reference tracking
M: Java.Interop.JniObjectReference Java.Interop.JniRuntime/JniObjectReferenceManager::CreateGlobalReference(Java.Interop.JniObjectReference)
M: System.Void Java.Interop.JniRuntime/JniObjectReferenceManager::DeleteGlobalReference(Java.Interop.JniObjectReference&)
M: Java.Interop.JniObjectReference Java.Interop.JniRuntime/JniObjectReferenceManager::CreateWeakGlobalReference(Java.Interop.JniObjectReference)
M: System.Void Java.Interop.JniRuntime/JniObjectReferenceManager::DeleteWeakGlobalReference(Java.Interop.JniObjectReference&)

# These *do* validate, they just validate via AssertValid() helper method
M: System.Void Java.Interop.JniRuntime::AttachCurrentThread(System.String,Java.Interop.JniObjectReference)
M: System.Void Java.Interop.JniRuntime::DestroyRuntime()
M: Java.Interop.JniType Java.Interop.JniType::GetSuperclass()
M: System.Boolean Java.Interop.JniType::IsAssignableFrom(Java.Interop.JniType)
M: System.Boolean Java.Interop.JniType::IsInstanceOfType(Java.Interop.JniObjectReference)
M: System.Void Java.Interop.JniType::RegisterNativeMethods(Java.Interop.JniNativeMethodRegistration[])
M: System.Void Java.Interop.JniType::UnregisterNativeMethods()
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetConstructor(System.String)
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetCachedConstructor(Java.Interop.JniInstanceMethodInfo&,System.String)
M: Java.Interop.JniObjectReference Java.Interop.JniType::AllocObject()
M: Java.Interop.JniObjectReference Java.Interop.JniType::NewObject(Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: Java.Interop.JniInstanceFieldInfo Java.Interop.JniType::GetInstanceField(System.String,System.String)
M: Java.Interop.JniInstanceFieldInfo Java.Interop.JniType::GetCachedInstanceField(Java.Interop.JniInstanceFieldInfo&,System.String,System.String)
M: Java.Interop.JniStaticFieldInfo Java.Interop.JniType::GetStaticField(System.String,System.String)
M: Java.Interop.JniStaticFieldInfo Java.Interop.JniType::GetCachedStaticField(Java.Interop.JniStaticFieldInfo&,System.String,System.String)
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetInstanceMethod(System.String,System.String)
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetCachedInstanceMethod(Java.Interop.JniInstanceMethodInfo&,System.String,System.String)
M: Java.Interop.JniStaticMethodInfo Java.Interop.JniType::GetStaticMethod(System.String,System.String)
M: Java.Interop.JniStaticMethodInfo Java.Interop.JniType::GetCachedStaticMethod(Java.Interop.JniStaticMethodInfo&,System.String,System.String)


R: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
# I'm not sure I understand "lack of cohesion" in this context, and the docs
# provide no examples. :-/
T: Java.Interop.JniArgumentValue
T: Java.Interop.JniEnvironmentInfo
T: Java.Interop.JniPeerMembers
T: Java.Interop.JniPeerMembers/JniInstanceMethods


R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
# These are "unnecessarily specialized" in order to promote type safety.
# Yes, we could take a JniFieldInfo for JniEnvironment.InstanceFields.GetObjectField(),
# but that would permit passing a JniStaticFieldInfo, which we DO NOT WANT.
# This is equally applicable to everything on this (huge!) list.
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/InstanceFields::GetObjectField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Boolean Java.Interop.JniEnvironment/InstanceFields::GetBooleanField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.SByte Java.Interop.JniEnvironment/InstanceFields::GetByteField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Char Java.Interop.JniEnvironment/InstanceFields::GetCharField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Int16 Java.Interop.JniEnvironment/InstanceFields::GetShortField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Int32 Java.Interop.JniEnvironment/InstanceFields::GetIntField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Int64 Java.Interop.JniEnvironment/InstanceFields::GetLongField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Single Java.Interop.JniEnvironment/InstanceFields::GetFloatField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Double Java.Interop.JniEnvironment/InstanceFields::GetDoubleField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetObjectField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,Java.Interop.JniObjectReference)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetBooleanField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Boolean)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetByteField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.SByte)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetCharField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Char)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetShortField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Int16)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetIntField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Int32)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetLongField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Int64)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetFloatField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Single)
M: System.Void Java.Interop.JniEnvironment/InstanceFields::SetDoubleField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Double)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/InstanceMethods::CallObjectMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/InstanceMethods::CallObjectMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Boolean Java.Interop.JniEnvironment/InstanceMethods::CallBooleanMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Boolean Java.Interop.JniEnvironment/InstanceMethods::CallBooleanMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.SByte Java.Interop.JniEnvironment/InstanceMethods::CallByteMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.SByte Java.Interop.JniEnvironment/InstanceMethods::CallByteMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Char Java.Interop.JniEnvironment/InstanceMethods::CallCharMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Char Java.Interop.JniEnvironment/InstanceMethods::CallCharMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int16 Java.Interop.JniEnvironment/InstanceMethods::CallShortMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Int16 Java.Interop.JniEnvironment/InstanceMethods::CallShortMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int32 Java.Interop.JniEnvironment/InstanceMethods::CallIntMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Int32 Java.Interop.JniEnvironment/InstanceMethods::CallIntMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int64 Java.Interop.JniEnvironment/InstanceMethods::CallLongMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Int64 Java.Interop.JniEnvironment/InstanceMethods::CallLongMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Single Java.Interop.JniEnvironment/InstanceMethods::CallFloatMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Single Java.Interop.JniEnvironment/InstanceMethods::CallFloatMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Double Java.Interop.JniEnvironment/InstanceMethods::CallDoubleMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Double Java.Interop.JniEnvironment/InstanceMethods::CallDoubleMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Void Java.Interop.JniEnvironment/InstanceMethods::CallVoidMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Void Java.Interop.JniEnvironment/InstanceMethods::CallVoidMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualObjectMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualObjectMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Boolean Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualBooleanMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Boolean Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualBooleanMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.SByte Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualByteMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.SByte Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualByteMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Char Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualCharMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Char Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualCharMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int16 Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualShortMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Int16 Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualShortMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int32 Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualIntMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Int32 Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualIntMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int64 Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualLongMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Int64 Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualLongMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Single Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualFloatMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Single Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualFloatMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Double Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualDoubleMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Double Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualDoubleMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Void Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualVoidMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: System.Void Java.Interop.JniEnvironment/InstanceMethods::CallNonvirtualVoidMethod(Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Object::NewObject(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Object::NewObject(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,Java.Interop.JniArgumentValue*)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Reflection::ToReflectedMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,System.Boolean)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Reflection::ToReflectedField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Boolean)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/StaticFields::GetStaticObjectField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Boolean Java.Interop.JniEnvironment/StaticFields::GetStaticBooleanField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.SByte Java.Interop.JniEnvironment/StaticFields::GetStaticByteField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Char Java.Interop.JniEnvironment/StaticFields::GetStaticCharField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Int16 Java.Interop.JniEnvironment/StaticFields::GetStaticShortField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Int32 Java.Interop.JniEnvironment/StaticFields::GetStaticIntField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Int64 Java.Interop.JniEnvironment/StaticFields::GetStaticLongField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Single Java.Interop.JniEnvironment/StaticFields::GetStaticFloatField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Double Java.Interop.JniEnvironment/StaticFields::GetStaticDoubleField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticObjectField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,Java.Interop.JniObjectReference)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticBooleanField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Boolean)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticByteField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.SByte)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticCharField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Char)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticShortField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Int16)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticIntField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Int32)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticLongField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Int64)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticFloatField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Single)
M: System.Void Java.Interop.JniEnvironment/StaticFields::SetStaticDoubleField(Java.Interop.JniObjectReference,Java.Interop.JniStaticFieldInfo,System.Double)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/StaticMethods::CallStaticObjectMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/StaticMethods::CallStaticObjectMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Boolean Java.Interop.JniEnvironment/StaticMethods::CallStaticBooleanMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Boolean Java.Interop.JniEnvironment/StaticMethods::CallStaticBooleanMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.SByte Java.Interop.JniEnvironment/StaticMethods::CallStaticByteMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.SByte Java.Interop.JniEnvironment/StaticMethods::CallStaticByteMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Char Java.Interop.JniEnvironment/StaticMethods::CallStaticCharMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Char Java.Interop.JniEnvironment/StaticMethods::CallStaticCharMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int16 Java.Interop.JniEnvironment/StaticMethods::CallStaticShortMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Int16 Java.Interop.JniEnvironment/StaticMethods::CallStaticShortMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int32 Java.Interop.JniEnvironment/StaticMethods::CallStaticIntMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Int32 Java.Interop.JniEnvironment/StaticMethods::CallStaticIntMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Int64 Java.Interop.JniEnvironment/StaticMethods::CallStaticLongMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Int64 Java.Interop.JniEnvironment/StaticMethods::CallStaticLongMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Single Java.Interop.JniEnvironment/StaticMethods::CallStaticFloatMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Single Java.Interop.JniEnvironment/StaticMethods::CallStaticFloatMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Double Java.Interop.JniEnvironment/StaticMethods::CallStaticDoubleMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Double Java.Interop.JniEnvironment/StaticMethods::CallStaticDoubleMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: System.Void Java.Interop.JniEnvironment/StaticMethods::CallStaticVoidMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo)
M: System.Void Java.Interop.JniEnvironment/StaticMethods::CallStaticVoidMethod(Java.Interop.JniObjectReference,Java.Interop.JniStaticMethodInfo,Java.Interop.JniArgumentValue*)
M: Java.Interop.JniInstanceFieldInfo Java.Interop.JniType::GetCachedInstanceField(Java.Interop.JniInstanceFieldInfo&,System.String,System.String)
M: Java.Interop.JniStaticFieldInfo Java.Interop.JniType::GetCachedStaticField(Java.Interop.JniStaticFieldInfo&,System.String,System.String)
M: Java.Interop.JniInstanceMethodInfo Java.Interop.JniType::GetCachedInstanceMethod(Java.Interop.JniInstanceMethodInfo&,System.String,System.String)
M: Java.Interop.JniStaticMethodInfo Java.Interop.JniType::GetCachedStaticMethod(Java.Interop.JniStaticMethodInfo&,System.String,System.String)


R: Gendarme.Rules.Maintainability.VariableNamesShouldNotMatchFieldNamesRule
# This is (1) a stupid rule, and (2) is counter to FxDG about parameter
# names matching property names in constructors
# https://msdn.microsoft.com/en-us/library/ms229060(v=vs.100).aspx
# > Do use the same name for constructor parameters and a property, if the
# > constructor parameters are used to simply set the property. The only
# > difference between such parameters and the properties should be casing.
T: Java.Interop.JniEnvironmentInfo
T: Java.Interop.JniType


R: Gendarme.Rules.Naming.AvoidNonAlphanumericIdentifierRule
# I have no ideas for how to better name the enum members here. :-(
T: Java.Interop.JniVersion


R: Gendarme.Rules.Naming.UseCorrectCasingRule
# These are `internal`. Don't care.
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Types::_FindClass(System.String)
M: System.IntPtr Java.Interop.JniRuntime::_AttachCurrentThread(System.String,Java.Interop.JniObjectReference)


R: Gendarme.Rules.Naming.UseCorrectSuffixRule
T: Java.Interop.DestroyJavaVMDelegate
T: Java.Interop.GetEnvDelegate
T: Java.Interop.AttachCurrentThreadDelegate
T: Java.Interop.DetachCurrentThreadDelegate
T: Java.Interop.AttachCurrentThreadAsDaemonDelegate
T: Java.Interop.JniObjectReferenceFlags


R: Gendarme.Rules.Performance.AvoidLargeStructureRule
# This is a *union*; it's size is sizeof(double). The rule check is buggy,
# and thinks that it's 36 bytes. Nope!
T: Java.Interop.JniArgumentValue
# This we can't make smaller; it *must* match the corresponding native struct!
T: Java.Interop.JniNativeInterfaceStruct


R: Gendarme.Rules.Performance.AvoidRepetitiveCastsRule
# The "repetitive" cast is in a Debug.Assert() call, which should be "stand-alone"
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Strings::NewString(System.Object)


R: Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule
# These are `public` for "completeness" reasons.
M: Java.Interop.JniObjectReferenceType Java.Interop.JniEnvironment/References::GetObjectRefType(Java.Interop.JniObjectReference)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Reflection::ToReflectedMethod(Java.Interop.JniObjectReference,Java.Interop.JniInstanceMethodInfo,System.Boolean)
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Reflection::ToReflectedField(Java.Interop.JniObjectReference,Java.Interop.JniInstanceFieldInfo,System.Boolean)
M: Java.Interop.JniObjectReferenceFlags Java.Interop.JniObjectReference::get_Flags()

# We need JNIEnv::FindClass() to be *bound* so that the JavaInterop_FindClass() wrapper is emitted.
# We don't want to actually *use* it, so it's `internal` and unused. Ignore
M: Java.Interop.JniObjectReference Java.Interop.JniEnvironment/Types::_FindClass(System.String)

# This is used via Reflection by Java.Interop.Dynamic.
M: Java.Interop.JniPeerMembers Java.Interop.JniPeerMembers::CreatePeerMembers(System.String,System.Type)


R: Gendarme.Rules.Performance.AvoidUnusedParametersRule
# This method is virtual; *overrides* need the parameter, not the default implementation.
M: System.Collections.Generic.IEnumerable`1<System.Type> Java.Interop.JniRuntime/JniTypeManager::CreateGetTypesForSimpleReferenceEnumerator(System.String)


R: Gendarme.Rules.Performance.UseTypeEmptyTypesRule
# The PCL profile we're using doen't *have* Type.EmptyTypes!
M: System.Void Java.Interop.JniRuntime/JniTypeManager::.cctor()

