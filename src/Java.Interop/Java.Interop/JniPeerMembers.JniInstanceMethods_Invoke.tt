<#@ template  language="C#" #>
<#@ assembly  name="System.Core" #>
<#@ import    namespace="System.Collections.Generic" #>
<#@ import    namespace="System.Linq" #>
<#@ import    namespace="System.Text" #>
<#
	var jniReturnTypes = new[]{
		new { JniCallType   = "Void",       ReturnType  = "void" },
		new { JniCallType   = "Boolean",    ReturnType  = "bool" },
		new { JniCallType   = "SByte",      ReturnType  = "sbyte" },
		new { JniCallType   = "Char",       ReturnType  = "char" },
		new { JniCallType   = "Int16",      ReturnType  = "short" },
		new { JniCallType   = "Int32",      ReturnType  = "int" },
		new { JniCallType   = "Int64",      ReturnType  = "long" },
		new { JniCallType   = "Single",     ReturnType  = "float" },
		new { JniCallType   = "Double",     ReturnType  = "double" },
		new { JniCallType   = "Object",     ReturnType  = "JniObjectReference" },
	};

#>
using System;

namespace Java.Interop {

	partial class JniPeerMembers {

		partial class JniInstanceMethods {
<#
	foreach (var returnType in jniReturnTypes) {
#>

			public unsafe <#= returnType.ReturnType #> InvokeAbstract<#= returnType.JniCallType #>Method (string encodedMember, IJavaPeerable self, JniArgumentValue* parameters)
			{
				JniPeerMembers.AssertSelf (self);

				var m   = GetMethodInfo (encodedMember);

				<#= returnType.ReturnType != "void" ? "return " : "" #>m.InvokeVirtual<#= returnType.JniCallType #>Method (self.PeerReference, parameters);
				<#= returnType.ReturnType == "void" ? "return;" : "" #>
			}

			public unsafe <#= returnType.ReturnType #> InvokeVirtual<#= returnType.JniCallType #>Method (string encodedMember, IJavaPeerable self, JniArgumentValue* parameters)
			{
				JniPeerMembers.AssertSelf (self);

				var declaringType   = DeclaringType;
				if (self.GetType () == declaringType || declaringType == null || self.GetType () == self.JniPeerMembers.ManagedPeerType) {
					var m   = GetMethodInfo (encodedMember);
					<#= returnType.ReturnType != "void" ? "return " : "" #>m.InvokeVirtual<#= returnType.JniCallType #>Method (self.PeerReference, parameters);
					<#= returnType.ReturnType == "void" ? "return;" : "" #>
				}
				var j = self.JniPeerMembers;
				var n = j.InstanceMethods.GetMethodInfo (encodedMember);
				<#= returnType.ReturnType != "void" ? "return " : "" #>n.InvokeNonvirtual<#= returnType.JniCallType #>Method (self.PeerReference, j.JniPeerType.PeerReference, parameters);
				<#= returnType.ReturnType == "void" ? "return;" : "" #>
			}

			public unsafe <#= returnType.ReturnType #> InvokeNonvirtual<#= returnType.JniCallType #>Method (string encodedMember, IJavaPeerable self, JniArgumentValue* parameters)
			{
				JniPeerMembers.AssertSelf (self);

				var m   = GetMethodInfo (encodedMember);

				<#= returnType.ReturnType != "void" ? "return " : "" #>m.InvokeNonvirtual<#= returnType.JniCallType #>Method (self.PeerReference, JniPeerType.PeerReference, parameters);
				<#= returnType.ReturnType == "void" ? "return;" : "" #>
			}
<#
	}
#>
		}
	}
}
