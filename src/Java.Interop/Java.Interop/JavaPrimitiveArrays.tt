<#@ template  language="C#" #>
<#@ assembly  name="System.Core" #>
<#@ import    namespace="System.Collections.Generic" #>
<#@ import    namespace="System.Linq" #>
<#@ import    namespace="System.Text" #>

using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace Java.Interop {

<#
	var arrayTypeInfo = new[]{
		new { JniType = "Z",    JniMarshalType  = "Boolean",    ManagedType = "Byte",   TypeModifier    = "Boolean" },
		new { JniType = "B",    JniMarshalType  = "Byte",       ManagedType = "SByte",  TypeModifier    = "SByte" },
		new { JniType = "C",    JniMarshalType  = "Char",       ManagedType = "Char",   TypeModifier    = "Char" },
		new { JniType = "S",    JniMarshalType  = "Short",      ManagedType = "Int16",  TypeModifier    = "Int16" },
		new { JniType = "I",    JniMarshalType  = "Int",        ManagedType = "Int32",  TypeModifier    = "Int32" },
		new { JniType = "J",    JniMarshalType  = "Long",       ManagedType = "Int64",  TypeModifier    = "Int64" },
		new { JniType = "F",    JniMarshalType  = "Float",      ManagedType = "Single", TypeModifier    = "Single" },
		new { JniType = "D",    JniMarshalType  = "Double",     ManagedType = "Double", TypeModifier    = "Double" },
	};
#>
	partial class JavaVM {
		static readonly KeyValuePair<Type, JniMarshalInfo>[] JniPrimitiveArrayMarshalers = new []{
<#
	foreach (var info in arrayTypeInfo) {
#>
			new KeyValuePair<Type, JniMarshalInfo>(typeof (<#= info.ManagedType #>[]), new JniMarshalInfo {
				GetValueFromJni             = Java<#= info.TypeModifier #>Array.GetValueFromJni,
				CreateLocalRef              = Java<#= info.TypeModifier #>Array.CreateLocalRef,
				CreateMarshalCollection     = Java<#= info.TypeModifier #>Array.CreateMarshalCollection,
				CleanupMarshalCollection    = Java<#= info.TypeModifier #>Array.CleanupMarshalCollection,
			}),
			new KeyValuePair<Type, JniMarshalInfo>(typeof (JavaArray<<#= info.ManagedType #>>), new JniMarshalInfo {
				GetValueFromJni             = Java<#= info.TypeModifier #>Array.GetValueFromJni,
				CreateLocalRef              = Java<#= info.TypeModifier #>Array.CreateLocalRef,
				CreateMarshalCollection     = Java<#= info.TypeModifier #>Array.CreateMarshalCollection,
				CleanupMarshalCollection    = Java<#= info.TypeModifier #>Array.CleanupMarshalCollection,
			}),
			new KeyValuePair<Type, JniMarshalInfo>(typeof (JavaPrimitiveArray<<#= info.ManagedType #>>), new JniMarshalInfo {
				GetValueFromJni             = Java<#= info.TypeModifier #>Array.GetValueFromJni,
				CreateLocalRef              = Java<#= info.TypeModifier #>Array.CreateLocalRef,
				CreateMarshalCollection     = Java<#= info.TypeModifier #>Array.CreateMarshalCollection,
				CleanupMarshalCollection    = Java<#= info.TypeModifier #>Array.CleanupMarshalCollection,
			}),
			new KeyValuePair<Type, JniMarshalInfo>(typeof (Java<#= info.TypeModifier #>Array), new JniMarshalInfo {
				GetValueFromJni             = Java<#= info.TypeModifier #>Array.GetValueFromJni,
				CreateLocalRef              = Java<#= info.TypeModifier #>Array.CreateLocalRef,
				CreateMarshalCollection     = Java<#= info.TypeModifier #>Array.CreateMarshalCollection,
				CleanupMarshalCollection    = Java<#= info.TypeModifier #>Array.CleanupMarshalCollection,
			}),
<#
	}
#>
		};
	}
<#
	foreach (var info in arrayTypeInfo) {
#>
	public sealed class Jni<#= info.TypeModifier #>ArrayElements : JniArrayElements {

		JniReferenceSafeHandle arrayHandle;

		internal Jni<#= info.TypeModifier #>ArrayElements (JniReferenceSafeHandle arrayHandle, IntPtr elements)
			: base (elements)
		{
			this.arrayHandle = arrayHandle;
		}

		public new unsafe <#= info.ManagedType #>* Elements {
			get {return (<#= info.ManagedType #>*) base.Elements;}
		}

		protected override void Synchronize (JniArrayElementsReleaseMode releaseMode)
		{
			JniEnvironment.Arrays.Release<#= info.JniMarshalType #>ArrayElements (arrayHandle, base.Elements, (int) releaseMode);
		}
	}

	[JniTypeInfo ("<#= info.JniType #>", ArrayRank=1, TypeIsKeyword=true)]
	public sealed partial class Java<#= info.TypeModifier #>Array : JavaPrimitiveArray<<#= info.ManagedType #>> {

		public Java<#= info.TypeModifier #>Array (JniReferenceSafeHandle handle, JniHandleOwnership transfer)
			: base (handle, transfer)
		{
		}

		public Java<#= info.TypeModifier #>Array (int length)
			: base (JniEnvironment.Arrays.New<#= info.JniMarshalType #>Array (CheckLength (length)), JniHandleOwnership.Transfer)
		{
		}

		public Java<#= info.TypeModifier #>Array (System.Collections.Generic.IList<<#= info.ManagedType #>> value)
			: this (CheckLength (value))
		{
			CopyFrom (_ToArray (value), 0, 0, value.Count);
		}

		public Java<#= info.TypeModifier #>Array (System.Collections.Generic.IEnumerable<<#= info.ManagedType #>> value)
			: this (_ToArray (value))
		{
		}

		protected override JniArrayElements CreateElements ()
		{
			return GetElements ();
		}

		public new Jni<#= info.TypeModifier #>ArrayElements GetElements ()
		{
			IntPtr elements = JniEnvironment.Arrays.Get<#= info.JniMarshalType #>ArrayElements (SafeHandle, IntPtr.Zero);
			return elements == IntPtr.Zero ? null : new Jni<#= info.TypeModifier #>ArrayElements (SafeHandle, elements);
		}

		public override unsafe int IndexOf (<#= info.ManagedType #> item)
		{
			int len = Length;
			if (len == 0)
				return -1;
			using (var e = GetElements ()) {
				Debug.Assert (e != null, "Java.<#= info.TypeModifier #>.Array.GetElements() returned null! OOM?");
				if (e == null)
					return -1;      // IList<T>.IndexOf() documents no exceptions. :-/

				for (int i = 0; i < len; ++i) {
					if (e.Elements [i] == item)
						return i;
				}
			}
			return -1;
		}

		public override unsafe void Clear ()
		{
			int len = Length;
			using (var e = GetElements ()) {
				for (int i = 0; i < len; ++i) {
					e.Elements [i] = default (<#= info.ManagedType #>);
				}
			}
		}

		public override unsafe void CopyTo (int sourceIndex, <#= info.ManagedType #>[] destinationArray, int destinationIndex, int length)
		{
			if (destinationArray == null)
				throw new ArgumentNullException ("destinationArray");
			CheckArrayCopy (sourceIndex, Length, destinationIndex, destinationArray.Length, length);
			if (destinationArray.Length == 0)
				return;

			fixed (<#= info.ManagedType #>* b = destinationArray)
				JniEnvironment.Arrays.Get<#= info.JniMarshalType #>ArrayRegion (SafeHandle, sourceIndex, length, (IntPtr) (b+destinationIndex));
		}

		public override unsafe void CopyFrom (<#= info.ManagedType #>[] sourceArray, int sourceIndex, int destinationIndex, int length)
		{
			if (sourceArray == null)
				throw new ArgumentNullException ("sourceArray");
			CheckArrayCopy (sourceIndex, sourceArray.Length, destinationIndex, Length, length);
			if (sourceArray.Length == 0)
				return;

			fixed (<#= info.ManagedType #>* b = sourceArray)
				JniEnvironment.Arrays.Set<#= info.JniMarshalType #>ArrayRegion (SafeHandle, destinationIndex, length, (IntPtr) (b+sourceIndex));
		}

		internal override bool TargetTypeIsCurrentType (Type targetType)
		{
			return base.TargetTypeIsCurrentType (targetType) ||
				typeof (JavaPrimitiveArray<<#= info.ManagedType #>>) == targetType ||
				typeof (Java<#= info.TypeModifier #>Array) == targetType;
		}

		internal static JniLocalReference CreateLocalRef (object value)
		{
		    return JavaArray<<#= info.ManagedType #>>.CreateLocalRef<Java<#= info.TypeModifier #>Array> (
		            value,
		            list => new Java<#= info.TypeModifier #>Array (list));
		}

		internal static IList<<#= info.ManagedType #>> GetValueFromJni (JniReferenceSafeHandle handle, JniHandleOwnership transfer, Type targetType)
		{
		    return JavaArray<<#= info.ManagedType #>>.GetValueFromJni (
		            handle,
		            transfer,
		            targetType,
		            (h, t) => new Java<#= info.TypeModifier #>Array (h, t));
		}

		internal static IJavaObject CreateMarshalCollection (object value)
		{
		    return JavaArray<<#= info.ManagedType #>>.CreateMarshalCollection (value, list => new Java<#= info.TypeModifier #>Array (list) {
		        forMarshalCollection = true,
		    });
		}

		internal static void CleanupMarshalCollection (IJavaObject marshalObject, object value)
		{
		    JavaArray<<#= info.ManagedType #>>.CleanupMarshalCollection<Java<#= info.TypeModifier #>Array> (marshalObject, value);
		}
	}

<#  } #>
}