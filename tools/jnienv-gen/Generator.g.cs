namespace Xamarin.Java.Interop
{
	partial class Generator
	{
		const   string          VersionsCategory                = "Versions";
		const   string          ClassesCategory                 = "Types";
		const   string          ExceptionsCategory              = "Exceptions";
		const   string          ReferencesCatgeory              = "References";
		const   string          ObjectOperationsCategory        = "Activator";
		const   string          InstanceFieldsCategory          = "InstanceFields";
		const   string          StaticFieldsCategory            = "StaticFields";
		const   string          InstanceMethodsCategory         = "InstanceMethods";
		const   string          StaticMethodsCategory           = "StaticMethods";
		const   string          StringOperationsCategory        = "Strings";
		const   string          ArrayOperationsCategory         = "Arrays";
		const   string          NativeMethodsCategory           = "Types";
		const   string          MonitorOperationsCategory       = "Monitors";
		const   string          NIOSupportCategory              = "IO";
		const   string          ReflectionSupportCategory       = "Reflection";
		const   string          JavaVMCategory                  = "References";

		static readonly JniFunction[] JNIEnvEntries    = new JniFunction[]{
			new JniFunction {
				DeclaringType = VersionsCategory,
				Name          = "GetVersion",
				Visibility    = "internal",
				Prototype     = "jint        (*GetVersion)(JNIEnv*);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "DefineClass",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jclass      (*DefineClass)(JNIEnv*, const char, jobject, const jbyte*, jsize);",
				ReturnType    = "jclass",
				Parameters    = new ParamInfo [] {new ParamInfo ("const char*", "name"), new ParamInfo ("jobject", "loader"), new ParamInfo ("const jbyte*", "buf"), new ParamInfo ("jsize", "bufLen")},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "FindClass",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jclass      (*FindClass)(JNIEnv*, const char*);",
				ReturnType    = "jclass",
				Parameters    = new ParamInfo [] {new ParamInfo ("const char*", "classname")},
			},
			new JniFunction {
				DeclaringType = ReflectionSupportCategory,
				Name          = "FromReflectedMethod",
				Visibility    = "private",
				Prototype     = "jmethodID   (*FromReflectedMethod)(JNIEnv*, jobject);",
				ReturnType    = "jmethodID",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "method")},
			},
			new JniFunction {
				DeclaringType = ReflectionSupportCategory,
				Name          = "FromReflectedField",
				Visibility    = "private",
				Prototype     = "jfieldID    (*FromReflectedField)(JNIEnv*, jobject);",
				ReturnType    = "jfieldID",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "field")},
			},
			new JniFunction {
				DeclaringType = ReflectionSupportCategory,
				Name          = "ToReflectedMethod",
				Visibility    = "internal",
				Prototype     = "jobject     (*ToReflectedMethod)(JNIEnv*, jclass, jmethodID, jboolean);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "cls"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jboolean", "isStatic")},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "GetSuperclass",
				Visibility    = "public",
				Prototype     = "jclass      (*GetSuperclass)(JNIEnv*, jclass);",
				ReturnType    = "jclass",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass")},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "IsAssignableFrom",
				Visibility    = "public",
				Prototype     = "jboolean    (*IsAssignableFrom)(JNIEnv*, jclass, jclass);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "clazz1"), new ParamInfo ("jclass", "clazz2")},
			},
			new JniFunction {
				DeclaringType = ReflectionSupportCategory,
				Name          = "ToReflectedField",
				Visibility    = "internal",
				Prototype     = "jobject     (*ToReflectedField)(JNIEnv*, jclass, jfieldID, jboolean);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "cls"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jboolean", "isStatic")},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "Throw",
				// CustomWrapper = true,
				Visibility    = "public",
				// Throws        = true,
				Prototype     = "jint        (*Throw)(JNIEnv*, jthrowable);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jthrowable", "obj")},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "ThrowNew",
				// CustomWrapper = true,
				Visibility    = "public",
				// Throws        = true,
				Prototype     = "jint        (*ThrowNew)(JNIEnv*, jclass, const char*);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "clazz"), new ParamInfo ("const char*", "message")},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "ExceptionOccurred",
				Visibility    = "internal",
				Prototype     = "jthrowable  (*ExceptionOccurred)(JNIEnv*);",
				ReturnType    = "jthrowable",
				Parameters    = new ParamInfo [] {},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "ExceptionDescribe",
				Visibility    = "internal",
				Prototype     = "void        (*ExceptionDescribe)(JNIEnv*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "ExceptionClear",
				Visibility    = "internal",
				Prototype     = "void        (*ExceptionClear)(JNIEnv*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "FatalError",
				Visibility    = "public",
				Prototype     = "void        (*FatalError)(JNIEnv*, const char*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("const char*", "msg")},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "PushLocalFrame",
				// CustomWrapper = true,
				Visibility    = "public",
				Prototype     = "jint        (*PushLocalFrame)(JNIEnv*, jint);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jint", "capacity")},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "PopLocalFrame",
				Visibility    = "public",
				Prototype     = "jobject     (*PopLocalFrame)(JNIEnv*, jobject);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "result", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "NewGlobalRef",
				ApiName       = "NewGlobalRef",
				Visibility    = "internal",
				// Prebind       = true,
				Prototype     = "jobject     (*NewGlobalRef)(JNIEnv*, jobject);",
				ReturnType    = "jglobal",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "DeleteGlobalRef",
				ApiName       = "DeleteGlobalRef",
				Visibility    = "internal",
				Prototype     = "void        (*DeleteGlobalRef)(JNIEnv*, jobject);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("IntPtr", "jobject", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "DeleteLocalRef",
				ApiName       = "DeleteLocalRef",
				Visibility    = "internal",
				// Prebind       = true,
				Prototype     = "void        (*DeleteLocalRef)(JNIEnv*, jobject);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("IntPtr", "jobject", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "IsSameObject",
				Visibility    = "public",
				Prototype     = "jboolean    (*IsSameObject)(JNIEnv*, jobject, jobject);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "ref1", Modifier.CanBeNull), new ParamInfo ("jobject", "ref2", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "NewLocalRef",
				ApiName       = "NewLocalRef",
				Visibility    = "internal",
				Prototype     = "jobject     (*NewLocalRef)(JNIEnv*, jobject);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "EnsureLocalCapacity",
				// CustomWrapper = true,
				Visibility    = "public",
				Prototype     = "jint        (*EnsureLocalCapacity)(JNIEnv*, jint);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jint", "capacity")},
			},
			new JniFunction {
				DeclaringType = ObjectOperationsCategory,
				Name          = "AllocObject",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jobject     (*AllocObject)(JNIEnv*, jclass);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass")},
			},
			new JniFunction {
				DeclaringType = ObjectOperationsCategory,
				Name          = "NewObject",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jobject     (*NewObject)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = ObjectOperationsCategory,
				Name          = "NewObjectV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jobject     (*NewObjectV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = ObjectOperationsCategory,
				Name          = "NewObjectA",
				ApiName       = "NewObject",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jobject     (*NewObjectA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "GetObjectClass",
				Visibility    = "public",
				Prototype     = "jclass      (*GetObjectClass)(JNIEnv*, jobject);",
				ReturnType    = "jclass",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject")},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "IsInstanceOf",
				Visibility    = "public",
				Prototype     = "jboolean    (*IsInstanceOf)(JNIEnv*, jobject, jclass);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "clazz")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "GetMethodID",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);",
				ReturnType    = "jmethodID",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "kls"), new ParamInfo ("const char*", "name"), new ParamInfo ("const char*", "signature")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallObjectMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jobject     (*CallObjectMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallObjectMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jobject     (*CallObjectMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallObjectMethodA",
				ApiName       = "CallObjectMethod",
				Throws        = true,
				Visibility    = "internal",
				Prototype     = "jobject     (*CallObjectMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallBooleanMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jboolean    (*CallBooleanMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallBooleanMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jboolean    (*CallBooleanMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallBooleanMethodA",
				ApiName       = "CallBooleanMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jboolean    (*CallBooleanMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallByteMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jbyte       (*CallByteMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallByteMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jbyte       (*CallByteMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallByteMethodA",
				ApiName       = "CallByteMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jbyte       (*CallByteMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallCharMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jchar       (*CallCharMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallCharMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jchar       (*CallCharMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallCharMethodA",
				ApiName       = "CallCharMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jchar       (*CallCharMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallShortMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jshort      (*CallShortMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallShortMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jshort      (*CallShortMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallShortMethodA",
				ApiName       = "CallShortMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jshort      (*CallShortMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallIntMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jint        (*CallIntMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallIntMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jint        (*CallIntMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallIntMethodA",
				ApiName       = "CallIntMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jint        (*CallIntMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallLongMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jlong       (*CallLongMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallLongMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jlong       (*CallLongMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallLongMethodA",
				ApiName       = "CallLongMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jlong       (*CallLongMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallFloatMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jfloat      (*CallFloatMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallFloatMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jfloat      (*CallFloatMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallFloatMethodA",
				ApiName       = "CallFloatMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jfloat      (*CallFloatMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallDoubleMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jdouble     (*CallDoubleMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallDoubleMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jdouble     (*CallDoubleMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallDoubleMethodA",
				ApiName       = "CallDoubleMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jdouble     (*CallDoubleMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallVoidMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallVoidMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "void        (*CallVoidMethodV)(JNIEnv*, jobject, jmethodID, va_list);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallVoidMethodA",
				ApiName       = "CallVoidMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*CallVoidMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualObjectMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jobject     (*CallNonvirtualObjectMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualObjectMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jobject     (*CallNonvirtualObjectMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    ="jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualObjectMethodA",
				ApiName       = "CallNonvirtualObjectMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jobject     (*CallNonvirtualObjectMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualBooleanMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jboolean    (*CallNonvirtualBooleanMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualBooleanMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jboolean    (*CallNonvirtualBooleanMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualBooleanMethodA",
				ApiName       = "CallNonvirtualBooleanMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jboolean    (*CallNonvirtualBooleanMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualByteMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jbyte       (*CallNonvirtualByteMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualByteMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jbyte       (*CallNonvirtualByteMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualByteMethodA",
				ApiName       = "CallNonvirtualByteMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jbyte       (*CallNonvirtualByteMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualCharMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jchar       (*CallNonvirtualCharMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualCharMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jchar       (*CallNonvirtualCharMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualCharMethodA",
				ApiName       = "CallNonvirtualCharMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jchar       (*CallNonvirtualCharMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualShortMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jshort      (*CallNonvirtualShortMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualShortMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jshort      (*CallNonvirtualShortMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualShortMethodA",
				ApiName       = "CallNonvirtualShortMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jshort      (*CallNonvirtualShortMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualIntMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jint        (*CallNonvirtualIntMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualIntMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jint        (*CallNonvirtualIntMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualIntMethodA",
				ApiName       = "CallNonvirtualIntMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jint        (*CallNonvirtualIntMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualLongMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jlong       (*CallNonvirtualLongMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualLongMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jlong       (*CallNonvirtualLongMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualLongMethodA",
				ApiName       = "CallNonvirtualLongMethod",
				Throws        = true,
				Visibility    = "internal",
				Prototype     = "jlong       (*CallNonvirtualLongMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualFloatMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jfloat      (*CallNonvirtualFloatMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualFloatMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jfloat      (*CallNonvirtualFloatMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualFloatMethodA",
				ApiName       = "CallNonvirtualFloatMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jfloat      (*CallNonvirtualFloatMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualDoubleMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jdouble     (*CallNonvirtualDoubleMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualDoubleMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jdouble     (*CallNonvirtualDoubleMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualDoubleMethodA",
				ApiName       = "CallNonvirtualDoubleMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jdouble     (*CallNonvirtualDoubleMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualVoidMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*CallNonvirtualVoidMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualVoidMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "void        (*CallNonvirtualVoidMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = InstanceMethodsCategory,
				Name          = "CallNonvirtualVoidMethodA",
				ApiName       = "CallNonvirtualVoidMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*CallNonvirtualVoidMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jclass", "jclass"), new ParamInfo ("jmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetFieldID",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jfieldID    (*GetFieldID)(JNIEnv*, jclass, const char*, const char*);",
				ReturnType    = "jfieldID",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("const char*", "name"), new ParamInfo ("const char*", "sig")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetObjectField",
				Visibility    = "internal",
				Prototype     = "jobject     (*GetObjectField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetBooleanField",
				Visibility    = "internal",
				Prototype     = "jboolean    (*GetBooleanField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetByteField",
				Visibility    = "internal",
				Prototype     = "jbyte       (*GetByteField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetCharField",
				Visibility    = "internal",
				Prototype     = "jchar       (*GetCharField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetShortField",
				Visibility    = "internal",
				Prototype     = "jshort      (*GetShortField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetIntField",
				Visibility    = "internal",
				Prototype     = "jint        (*GetIntField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetLongField",
				Visibility    = "internal",
				Prototype     = "jlong       (*GetLongField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetFloatField",
				Visibility    = "internal",
				Prototype     = "jfloat      (*GetFloatField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "GetDoubleField",
				Visibility    = "internal",
				Prototype     = "jdouble     (*GetDoubleField)(JNIEnv*, jobject, jfieldID);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetObjectField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetObjectField)(JNIEnv*, jobject, jfieldID, jobject);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jobject", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetBooleanField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetBooleanField)(JNIEnv*, jobject, jfieldID, jboolean);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jboolean", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetByteField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetByteField)(JNIEnv*, jobject, jfieldID, jbyte);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jbyte", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetCharField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetCharField)(JNIEnv*, jobject, jfieldID, jchar);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jchar", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetShortField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetShortField)(JNIEnv*, jobject, jfieldID, jshort);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jshort", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetIntField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetIntField)(JNIEnv*, jobject, jfieldID, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jint", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetLongField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetLongField)(JNIEnv*, jobject, jfieldID, jlong);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jlong", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetFloatField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetFloatField)(JNIEnv*, jobject, jfieldID, jfloat);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jfloat", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = InstanceFieldsCategory,
				Name          = "SetDoubleField",
				ApiName       = "SetField",
				Visibility    = "internal",
				Prototype     = "void        (*SetDoubleField)(JNIEnv*, jobject, jfieldID, jdouble);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject"), new ParamInfo ("jfieldID", "jfieldID"), new ParamInfo ("jdouble", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "GetStaticMethodID",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jmethodID   (*GetStaticMethodID)(JNIEnv*, jclass, const char*, const char*);",
				ReturnType    = "jstaticmethodID",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("const char*", "name"), new ParamInfo ("const char*", "sig")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticObjectMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jobject     (*CallStaticObjectMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticObjectMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jobject     (*CallStaticObjectMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticObjectMethodA",
				ApiName       = "CallStaticObjectMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jobject     (*CallStaticObjectMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticBooleanMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jboolean    (*CallStaticBooleanMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticBooleanMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jboolean    (*CallStaticBooleanMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticBooleanMethodA",
				ApiName       = "CallStaticBooleanMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jboolean    (*CallStaticBooleanMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticByteMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jbyte       (*CallStaticByteMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticByteMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jbyte       (*CallStaticByteMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticByteMethodA",
				ApiName       = "CallStaticByteMethod",
				Throws        = true,
				Visibility    = "internal",
				Prototype     = "jbyte       (*CallStaticByteMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticCharMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jchar       (*CallStaticCharMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticCharMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jchar       (*CallStaticCharMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticCharMethodA",
				ApiName       = "CallStaticCharMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jchar       (*CallStaticCharMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticShortMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jshort      (*CallStaticShortMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticShortMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jshort      (*CallStaticShortMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticShortMethodA",
				ApiName       = "CallStaticShortMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jshort      (*CallStaticShortMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticIntMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jint        (*CallStaticIntMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticIntMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jint        (*CallStaticIntMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticIntMethodA",
				ApiName       = "CallStaticIntMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jint        (*CallStaticIntMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticLongMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jlong       (*CallStaticLongMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticLongMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jlong       (*CallStaticLongMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticLongMethodA",
				ApiName       = "CallStaticLongMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jlong       (*CallStaticLongMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticFloatMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jfloat      (*CallStaticFloatMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticFloatMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jfloat      (*CallStaticFloatMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticFloatMethodA",
				ApiName       = "CallStaticFloatMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jfloat      (*CallStaticFloatMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticDoubleMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jdouble     (*CallStaticDoubleMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticDoubleMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jdouble     (*CallStaticDoubleMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticDoubleMethodA",
				ApiName       = "CallStaticDoubleMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jdouble     (*CallStaticDoubleMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticVoidMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*CallStaticVoidMethod)(JNIEnv*, jclass, jmethodID, ...);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticVoidMethodV",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "void        (*CallStaticVoidMethodV)(JNIEnv*, jclass, jmethodID, va_list);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("va_list", "args")},
			},
			new JniFunction {
				DeclaringType = StaticMethodsCategory,
				Name          = "CallStaticVoidMethodA",
				ApiName       = "CallStaticVoidMethod",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*CallStaticVoidMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticmethodID", "jmethod"), new ParamInfo ("jvalue*", "parms", true)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticFieldID",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jstaticfieldID    (*GetStaticFieldID)(JNIEnv*, jclass, const char*, const char*);",
				ReturnType    = "jstaticfieldID",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("const char*", "name"), new ParamInfo ("const char*", "sig")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticObjectField",
				Visibility    = "internal",
				Prototype     = "jobject     (*GetStaticObjectField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticBooleanField",
				Visibility    = "internal",
				Prototype     = "jboolean    (*GetStaticBooleanField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticByteField",
				Visibility    = "internal",
				Prototype     = "jbyte       (*GetStaticByteField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jbyte",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticCharField",
				Visibility    = "internal",
				Prototype     = "jchar       (*GetStaticCharField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jchar",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticShortField",
				Visibility    = "internal",
				Prototype     = "jshort      (*GetStaticShortField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jshort",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticIntField",
				Visibility    = "internal",
				Prototype     = "jint        (*GetStaticIntField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticLongField",
				Visibility    = "internal",
				Prototype     = "jlong       (*GetStaticLongField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticFloatField",
				Visibility    = "internal",
				Prototype     = "jfloat      (*GetStaticFloatField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jfloat",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "GetStaticDoubleField",
				Visibility    = "internal",
				Prototype     = "jdouble     (*GetStaticDoubleField)(JNIEnv*, jclass, jfieldID);",
				ReturnType    = "jdouble",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID")},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticObjectField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticObjectField)(JNIEnv*, jclass, jfieldID, jobject);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jobject", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticBooleanField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticBooleanField)(JNIEnv*, jclass, jfieldID, jboolean);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jboolean", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticByteField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticByteField)(JNIEnv*, jclass, jfieldID, jbyte);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jbyte", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticCharField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticCharField)(JNIEnv*, jclass, jfieldID, jchar);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jchar", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticShortField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticShortField)(JNIEnv*, jclass, jfieldID, jshort);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jshort", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticIntField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticIntField)(JNIEnv*, jclass, jfieldID, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jint", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticLongField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticLongField)(JNIEnv*, jclass, jfieldID, jlong);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jlong", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticFloatField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticFloatField)(JNIEnv*, jclass, jfieldID, jfloat);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jfloat", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StaticFieldsCategory,
				Name          = "SetStaticDoubleField",
				ApiName       = "SetStaticField",
				Visibility    = "internal",
				Prototype     = "void        (*SetStaticDoubleField)(JNIEnv*, jclass, jfieldID, jdouble);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("jstaticfieldID", "jfieldID"), new ParamInfo ("jdouble", "val", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "NewString",
				// CustomWrapper = true,
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "jstring     (*NewString)(JNIEnv*, const jchar*, jsize);",
				ReturnType    = "jstring",
				Parameters    = new ParamInfo [] {new ParamInfo (TypeInfo.Create ("const jchar*", "IntPtr"), "unicodeChars"), new ParamInfo ("jsize", "len")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringLength",
				Visibility    = "internal",
				Prototype     = "jsize       (*GetStringLength)(JNIEnv*, jstring);",
				ReturnType    = "jsize",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringChars",
				Visibility    = "internal",
				Prototype     = "const jchar* (*GetStringChars)(JNIEnv*, jstring, jboolean*);",
				ReturnType    = TypeInfo.Create ("const jchar*", "IntPtr"),
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "ReleaseStringChars",
				Visibility    = "internal",
				Prototype     = "void        (*ReleaseStringChars)(JNIEnv*, jstring, const jchar*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string"), new ParamInfo (TypeInfo.Create ("const jchar*", "IntPtr"), "chars")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "NewStringUTF",
				Visibility    = "private",
				Throws        = true,
				Prototype     = "jstring     (*NewStringUTF)(JNIEnv*, const char*);",
				ReturnType    = "jstring",
				Parameters    = new ParamInfo [] {new ParamInfo ("const char*", "bytes")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringUTFLength",
				Visibility    = "private",
				Prototype     = "jsize       (*GetStringUTFLength)(JNIEnv*, jstring);",
				ReturnType    = "jsize",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringUTFChars",
				Visibility    = "private",
				Prototype     = "const char* (*GetStringUTFChars)(JNIEnv*, jstring, jboolean*);",
				ReturnType    = "const char*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "ReleaseStringUTFChars",
				Visibility    = "private",
				Prototype     = "void        (*ReleaseStringUTFChars)(JNIEnv*, jstring, const char*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string"), new ParamInfo ("const char*", "utf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetArrayLength",
				// CustomWrapper = true,
				Visibility    = "public",
				Prototype     = "jsize       (*GetArrayLength)(JNIEnv*, jarray);",
				ReturnType    = "jsize",
				Parameters    = new ParamInfo [] {new ParamInfo ("jarray", "array_ptr")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewObjectArray",
				// ApiName       = "NewArray",
				// CustomWrapper = true,
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jobjectArray (*NewObjectArray)(JNIEnv*, jsize, jclass, jobject);",
				ReturnType    = "jobjectArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length"), new ParamInfo ("jclass", "elementClass"), new ParamInfo ("jobject", "initialElement", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetObjectArrayElement",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jobject     (*GetObjectArrayElement)(JNIEnv*, jobjectArray, jsize);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobjectArray", "array"), new ParamInfo ("jsize", "index")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetObjectArrayElement",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetObjectArrayElement)(JNIEnv*, jobjectArray, jsize, jobject);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobjectArray", "array"), new ParamInfo ("jsize", "index"), new ParamInfo ("jobject", "value", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewBooleanArray",
				Visibility    = "public",
				Prototype     = "jbooleanArray (*NewBooleanArray)(JNIEnv*, jsize);",
				ReturnType    = "jbooleanArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewByteArray",
				Visibility    = "public",
				Prototype     = "jbyteArray  (*NewByteArray)(JNIEnv*, jsize);",
				ReturnType    = "jbyteArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewCharArray",
				Visibility    = "public",
				Prototype     = "jcharArray  (*NewCharArray)(JNIEnv*, jsize);",
				ReturnType    = "jcharArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewShortArray",
				Visibility    = "public",
				Prototype     = "jshortArray (*NewShortArray)(JNIEnv*, jsize);",
				ReturnType    = "jshortArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewIntArray",
				Visibility    = "public",
				Prototype     = "jintArray   (*NewIntArray)(JNIEnv*, jsize);",
				ReturnType    = "jintArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewLongArray",
				Visibility    = "public",
				Prototype     = "jlongArray  (*NewLongArray)(JNIEnv*, jsize);",
				ReturnType    = "jlongArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewFloatArray",
				Visibility    = "public",
				Prototype     = "jfloatArray (*NewFloatArray)(JNIEnv*, jsize);",
				ReturnType    = "jfloatArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "NewDoubleArray",
				Visibility    = "public",
				Prototype     = "jdoubleArray (*NewDoubleArray)(JNIEnv*, jsize);",
				ReturnType    = "jdoubleArray",
				Parameters    = new ParamInfo [] {new ParamInfo ("jsize", "length")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetBooleanArrayElements",
				Visibility    = "public",
				Prototype     = "jboolean*   (*GetBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*);",
				ReturnType    = "jboolean*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbooleanArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetByteArrayElements",
				Visibility    = "public",
				Prototype     = "jbyte*      (*GetByteArrayElements)(JNIEnv*, jbyteArray, jboolean*);",
				ReturnType    = "jbyte*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbyteArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetCharArrayElements",
				Visibility    = "public",
				Prototype     = "jchar*      (*GetCharArrayElements)(JNIEnv*, jcharArray, jboolean*);",
				ReturnType    = "jchar*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jcharArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetShortArrayElements",
				Visibility    = "public",
				Prototype     = "jshort*     (*GetShortArrayElements)(JNIEnv*, jshortArray, jboolean*);",
				ReturnType    = "jshort*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jshortArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetIntArrayElements",
				Visibility    = "public",
				Prototype     = "jint*       (*GetIntArrayElements)(JNIEnv*, jintArray, jboolean*);",
				ReturnType    = "jint*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jintArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetLongArrayElements",
				Visibility    = "public",
				Prototype     = "jlong*      (*GetLongArrayElements)(JNIEnv*, jlongArray, jboolean*);",
				ReturnType    = "jlong*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jlongArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetFloatArrayElements",
				Visibility    = "public",
				Prototype     = "jfloat*     (*GetFloatArrayElements)(JNIEnv*, jfloatArray, jboolean*);",
				ReturnType    = "jfloat*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jfloatArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetDoubleArrayElements",
				Visibility    = "public",
				Prototype     = "jdouble*    (*GetDoubleArrayElements)(JNIEnv*, jdoubleArray, jboolean*);",
				ReturnType    = "jdouble*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jdoubleArray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseBooleanArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbooleanArray", "array"), new ParamInfo ("jboolean*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseByteArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseByteArrayElements)(JNIEnv*, jbyteArray, jbyte*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbyteArray", "array"), new ParamInfo ("jbyte*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseCharArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseCharArrayElements)(JNIEnv*, jcharArray, jchar*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jcharArray", "array"), new ParamInfo ("jchar*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseShortArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseShortArrayElements)(JNIEnv*, jshortArray, jshort*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jshortArray", "array"), new ParamInfo ("jshort*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseIntArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseIntArrayElements)(JNIEnv*, jintArray, jint*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jintArray", "array"), new ParamInfo ("jint*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseLongArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseLongArrayElements)(JNIEnv*, jlongArray, jlong*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jlongArray", "array"), new ParamInfo ("jlong*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseFloatArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseFloatArrayElements)(JNIEnv*, jfloatArray, jfloat*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jfloatArray", "array"), new ParamInfo ("jfloat*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleaseDoubleArrayElements",
				Visibility    = "public",
				Prototype     = "void        (*ReleaseDoubleArrayElements)(JNIEnv*, jdoubleArray, jdouble*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jdoubleArray", "array"), new ParamInfo ("jdouble*", "elems"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetBooleanArrayRegion",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*GetBooleanArrayRegion)(JNIEnv*, jbooleanArray, jsize, jsize, jboolean*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbooleanArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jboolean*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetByteArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetByteArrayRegion)(JNIEnv*, jbyteArray, jsize, jsize, jbyte*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbyteArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jbyte*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetCharArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetCharArrayRegion)(JNIEnv*, jcharArray, jsize, jsize, jchar*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jcharArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jchar*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetShortArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetShortArrayRegion)(JNIEnv*, jshortArray, jsize, jsize, jshort*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jshortArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jshort*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetIntArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetIntArrayRegion)(JNIEnv*, jintArray, jsize, jsize, jint*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jintArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jint*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetLongArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetLongArrayRegion)(JNIEnv*, jlongArray, jsize, jsize, jlong*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jlongArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jlong*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetFloatArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetFloatArrayRegion)(JNIEnv*, jfloatArray, jsize, jsize, jfloat*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jlongArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jlong*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetDoubleArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*GetDoubleArrayRegion)(JNIEnv*, jdoubleArray, jsize, jsize, jdouble*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jdoubleArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jdouble*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetBooleanArrayRegion",
				Visibility    = "internal",
				Throws        = true,
				Prototype     = "void        (*SetBooleanArrayRegion)(JNIEnv*, jbooleanArray, jsize, jsize, const jboolean*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbooleanArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jboolean*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetByteArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetByteArrayRegion)(JNIEnv*, jbyteArray, jsize, jsize, const jbyte*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jbyteArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jbyte*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetCharArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetCharArrayRegion)(JNIEnv*, jcharArray, jsize, jsize, const jchar*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jcharArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo (TypeInfo.Create ("const jchar*", "IntPtr"), "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetShortArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetShortArrayRegion)(JNIEnv*, jshortArray, jsize, jsize, const jshort*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jshortArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jshort*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetIntArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetIntArrayRegion)(JNIEnv*, jintArray, jsize, jsize, const jint*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jintArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jint*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetLongArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetLongArrayRegion)(JNIEnv*, jlongArray, jsize, jsize, const jlong*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jlongArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jlong*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetFloatArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetFloatArrayRegion)(JNIEnv*, jfloatArray, jsize, jsize, const jfloat*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jfloatArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jfloat*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "SetDoubleArrayRegion",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "void        (*SetDoubleArrayRegion)(JNIEnv*, jdoubleArray, jsize, jsize, const jdouble*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jdoubleArray", "array"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("const jdouble*", "buf")},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "RegisterNatives",
				Visibility    = "internal",
				// Prebind       = true,
				Throws        = true,
				Prototype     = "jint        (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*, jint);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass"), new ParamInfo ("const JNINativeMethod*", "methods"), new ParamInfo ("jint", "nMethods")},
			},
			new JniFunction {
				DeclaringType = ClassesCategory,
				Name          = "UnregisterNatives",
				Visibility    = "internal",
				Prototype     = "jint        (*UnregisterNatives)(JNIEnv*, jclass);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jclass", "jclass")},
			},
			new JniFunction {
				DeclaringType = MonitorOperationsCategory,
				Name          = "MonitorEnter",
				Visibility    = "public",
				Prototype     = "jint        (*MonitorEnter)(JNIEnv*, jobject);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj")},
			},
			new JniFunction {
				DeclaringType = MonitorOperationsCategory,
				Name          = "MonitorExit",
				Visibility    = "public",
				Prototype     = "jint        (*MonitorExit)(JNIEnv*, jobject);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "obj")},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "GetJavaVM",
				Visibility    = "public",
				// Prebind       = true,
				Prototype     = "jint        (*GetJavaVM)(JNIEnv*, JavaVM**);",
				ReturnType    = "jint",
				Parameters    = new ParamInfo [] {new ParamInfo ("JavaVM**", "vm")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringRegion",
				Visibility    = "private",
				Prototype     = "void        (*GetStringRegion)(JNIEnv*, jstring, jsize, jsize, jchar*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "str"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("jchar*", "buf")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringUTFRegion",
				Visibility    = "private",
				Prototype     = "void        (*GetStringUTFRegion)(JNIEnv*, jstring, jsize, jsize, char*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "str"), new ParamInfo ("jsize", "start"), new ParamInfo ("jsize", "len"), new ParamInfo ("char*", "buf")},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "GetPrimitiveArrayCritical",
				Visibility    = "private",
				Prototype     = "void*       (*GetPrimitiveArrayCritical)(JNIEnv*, jarray, jboolean*);",
				ReturnType    = "void*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jarray", "array"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ArrayOperationsCategory,
				Name          = "ReleasePrimitiveArrayCritical",
				Visibility    = "private",
				Prototype     = "void        (*ReleasePrimitiveArrayCritical)(JNIEnv*, jarray, void*, jint);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jarray", "array"), new ParamInfo ("void*", "carray"), new ParamInfo ("jint", "mode")},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "GetStringCritical",
				Visibility    = "private",
				Prototype     = "const jchar* (*GetStringCritical)(JNIEnv*, jstring, jboolean*);",
				ReturnType    = "const jchar*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string"), new ParamInfo ("jboolean*", "isCopy", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = StringOperationsCategory,
				Name          = "ReleaseStringCritical",
				Visibility    = "private",
				Prototype     = "void        (*ReleaseStringCritical)(JNIEnv*, jstring, const jchar*);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("jstring", "@string"), new ParamInfo ("const jchar*", "carray")},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "NewWeakGlobalRef",
				Visibility    = "internal",
				Prototype     = "jweak       (*NewWeakGlobalRef)(JNIEnv*, jobject);",
				ReturnType    = "jweak",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "DeleteWeakGlobalRef",
				ApiName       = "DeleteWeakGlobalRef",
				Visibility    = "internal",
				Prototype     = "void        (*DeleteWeakGlobalRef)(JNIEnv*, jweak);",
				ReturnType    = "void",
				Parameters    = new ParamInfo [] {new ParamInfo ("IntPtr", "jobject", Modifier.CanBeNull)},
			},
			new JniFunction {
				DeclaringType = ExceptionsCategory,
				Name          = "ExceptionCheck",
				Visibility    = "internal",
				Prototype     = "jboolean    (*ExceptionCheck)(JNIEnv*);",
				ReturnType    = "jboolean",
				Parameters    = new ParamInfo [] {},
			},
			new JniFunction {
				DeclaringType = NIOSupportCategory,
				Name          = "NewDirectByteBuffer",
				Visibility    = "public",
				Throws        = true,
				Prototype     = "jobject     (*NewDirectByteBuffer)(JNIEnv*, void*, jlong);",
				ReturnType    = "jobject",
				Parameters    = new ParamInfo [] {new ParamInfo ("void*", "address"), new ParamInfo ("jlong", "capacity")},
			},
			new JniFunction {
				DeclaringType = NIOSupportCategory,
				Name          = "GetDirectBufferAddress",
				Visibility    = "public",
				Prototype     = "void*       (*GetDirectBufferAddress)(JNIEnv*, jobject);",
				ReturnType    = "void*",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "buf")},
			},
			new JniFunction {
				DeclaringType = NIOSupportCategory,
				Name          = "GetDirectBufferCapacity",
				Visibility    = "public",
				Prototype     = "jlong       (*GetDirectBufferCapacity)(JNIEnv*, jobject);",
				ReturnType    = "jlong",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "buf")},
			},
			new JniFunction {
				DeclaringType = ReferencesCatgeory,
				Name          = "GetObjectRefType",
				Visibility    = "internal",
				Prototype     = "jobjectRefType (*GetObjectRefType)(JNIEnv*, jobject);",
				ReturnType    = "jobjectRefType",
				Parameters    = new ParamInfo [] {new ParamInfo ("jobject", "jobject")},
			},
		};
	}
}
